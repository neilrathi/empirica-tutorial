{"version":3,"sources":["../src/player/classic/classic.ts"],"sourcesContent":["import { BehaviorSubject, Observable, Subject } from \"rxjs\";\nimport { Attributes } from \"../../shared/attributes\";\nimport { Globals } from \"../../shared/globals\";\nimport { Constructor } from \"../../shared/helpers\";\nimport { TajribaProvider } from \"../provider\";\nimport { Scope, Scopes } from \"../scopes\";\nimport { Steps } from \"../steps\";\n\nexport const endedStatuses = [\"ended\", \"terminated\", \"failed\"];\nexport type EndedStatuses = typeof endedStatuses[number];\n\nexport class Game extends Scope<Context, EmpiricaClassicKinds> {\n  get hasEnded() {\n    return endedStatuses.includes(this.get(\"status\") as EndedStatuses);\n  }\n\n  get stage() {\n    return this.scopeByKey(\"stageID\") as Stage | undefined;\n  }\n\n  get round() {\n    return this.stage?.round;\n  }\n}\n\nexport class Player extends Scope<Context, EmpiricaClassicKinds> {\n  get game() {\n    const { game } = this.ctx;\n    if (!game) {\n      return;\n    }\n\n    const key = `playerGameID-${game.id}`;\n    return this.scopeByKey(key) as PlayerGame | undefined;\n  }\n\n  get round() {\n    const { stage } = this.ctx;\n    if (!stage) {\n      return;\n    }\n\n    const { round } = stage;\n    if (!round) {\n      return;\n    }\n\n    const key = `playerRoundID-${round.id}`;\n    return this.scopeByKey(key) as PlayerRound | undefined;\n  }\n\n  get stage() {\n    const { stage } = this.ctx;\n    if (!stage) {\n      return;\n    }\n\n    const key = `playerStageID-${stage.id}`;\n    return this.scopeByKey(key) as PlayerStage | undefined;\n  }\n\n  hasUpdated() {\n    if (super.hasUpdated()) {\n      return true;\n    }\n\n    return Boolean(\n      this.round?.hasUpdated() ||\n        this.stage?.hasUpdated() ||\n        this.game?.hasUpdated()\n    );\n  }\n}\n\nexport class PlayerGame extends Scope<Context, EmpiricaClassicKinds> {}\n\nexport class PlayerRound extends Scope<Context, EmpiricaClassicKinds> {}\n\nexport class PlayerStage extends Scope<Context, EmpiricaClassicKinds> {}\n\nexport class Round extends Scope<Context, EmpiricaClassicKinds> {}\n\nexport class Stage extends Scope<Context, EmpiricaClassicKinds> {\n  get round() {\n    return this.scopeByKey(\"roundID\") as Round | undefined;\n  }\n\n  get timer() {\n    return this.tickerByKey(\"timerID\");\n  }\n}\n\n// TODO update context\nexport class Context {\n  public game?: Game | null;\n  public stage?: Stage | null;\n}\n\nexport type EmpiricaClassicKinds = {\n  game: Constructor<Game>;\n  player: Constructor<Player>;\n  playerGame: Constructor<PlayerGame>;\n  playerRound: Constructor<PlayerRound>;\n  playerStage: Constructor<PlayerStage>;\n  round: Constructor<Round>;\n  stage: Constructor<Stage>;\n};\n\nexport const kinds = {\n  game: Game,\n  player: Player,\n  playerGame: PlayerGame,\n  playerRound: PlayerRound,\n  playerStage: PlayerStage,\n  round: Round,\n  stage: Stage,\n};\n\nexport type EmpiricaClassicContext = {\n  game: BehaviorSubject<Game | null | undefined>;\n  player: BehaviorSubject<Player | null | undefined>;\n  players: BehaviorSubject<Player[] | undefined>;\n  round: BehaviorSubject<Round | null | undefined>;\n  stage: BehaviorSubject<Stage | null | undefined>;\n  globals: BehaviorSubject<Globals | undefined>;\n};\n\nexport function EmpiricaClassic(\n  participantID: string,\n  provider: TajribaProvider\n): EmpiricaClassicContext {\n  const attributesDones = new Subject<string[]>();\n  const scopesDones = new Subject<string[]>();\n\n  const ctx = new Context();\n  const attributes = new Attributes(\n    provider.attributes,\n    attributesDones,\n    provider.setAttributes\n  );\n  const steps = new Steps(\n    provider.steps,\n    provider.dones as unknown as Observable<void>\n  );\n  const scopes = new Scopes(\n    provider.scopes,\n    scopesDones,\n    ctx,\n    kinds,\n    attributes,\n    steps\n  );\n  const participantIDs = new Set<string>();\n\n  const glob = new Globals(provider.globals);\n\n  const ret = {\n    game: new BehaviorSubject<Game | null | undefined>(undefined),\n    player: new BehaviorSubject<Player | null | undefined>(undefined),\n    players: new BehaviorSubject<Player[] | undefined>(undefined),\n    round: new BehaviorSubject<Round | null | undefined>(undefined),\n    stage: new BehaviorSubject<Stage | null | undefined>(undefined),\n    globals: glob.self,\n  };\n\n  provider.participants.subscribe({\n    next: ({ participant, removed }) => {\n      if (removed) {\n        if (participantIDs.has(participant.id)) {\n          participantIDs.delete(participant.id);\n        }\n      } else {\n        if (!participantIDs.has(participant.id)) {\n          participantIDs.add(participant.id);\n        }\n      }\n    },\n  });\n\n  let scopesUpdated = new Set<string>();\n  provider.attributes.subscribe({\n    next: (attr) => {\n      const nodeID = attr.attribute.node?.id || attr.attribute.nodeID;\n      if (!nodeID) {\n        return;\n      }\n\n      scopesUpdated.add(nodeID);\n    },\n  });\n\n  provider.dones.subscribe({\n    next: () => {\n      const current = getCurrent(ret);\n      const updated = getMainObjects(participantID, scopes, attributes);\n      ctx.game = updated.game;\n      ctx.stage = updated.stage;\n\n      if (scopeChanged(current.game, updated.game)) {\n        ret.game.next(updated.game);\n      }\n\n      if (scopeChanged(current.player, updated.player)) {\n        ret.player.next(updated.player);\n      }\n\n      if (scopeChanged(current.round, updated.round)) {\n        ret.round.next(updated.round);\n      }\n\n      if (scopeChanged(current.stage, updated.stage) || steps.hadUpdates()) {\n        ret.stage.next(updated.stage);\n      }\n\n      let playersChanged = false;\n      const players: Player[] = [];\n      for (let i = 0; i < (updated.players || []).length; i++) {\n        let p = updated.players![i];\n\n        if (p) {\n          const partID = attributes.nextAttributeValue(\n            p.id,\n            \"participantID\"\n          ) as string;\n          if (!participantIDs.has(partID)) {\n            p = undefined;\n          }\n        }\n\n        if (!playersChanged && scopeChanged(p, (current.players || [])[i])) {\n          playersChanged = true;\n        }\n\n        if (p) {\n          players.push(p);\n        }\n      }\n      if (playersChanged) {\n        ret.players.next(players);\n      }\n\n      const scopeIDs = Array.from(scopesUpdated);\n      scopesDones.next(scopeIDs);\n      attributesDones.next(scopeIDs);\n      scopesUpdated.clear();\n    },\n  });\n\n  return ret;\n}\n\ntype mainObjects = {\n  game?: Game | null;\n  player?: Player | null;\n  round?: Round | null;\n  stage?: Stage | null;\n  players?: Player[];\n};\n\nfunction scopeChanged(\n  current?: Scope<Context, EmpiricaClassicKinds> | null,\n  updated?: Scope<Context, EmpiricaClassicKinds> | null\n): boolean {\n  if (!current && !updated) {\n    if (current === undefined && updated === null) {\n      return true;\n    }\n\n    return false;\n  }\n\n  if (!current || !updated) {\n    return true;\n  }\n\n  return current.id !== updated.id || updated.hasUpdated();\n}\n\nfunction getCurrent(ctx: EmpiricaClassicContext): mainObjects {\n  return {\n    game: ctx.game.getValue(),\n    player: ctx.player.getValue(),\n    round: ctx.round.getValue(),\n    stage: ctx.stage.getValue(),\n    players: ctx.players.getValue(),\n  };\n}\n\nfunction getMainObjects(\n  participantID: string,\n  scopes: Scopes<Context, EmpiricaClassicKinds>,\n  attributes: Attributes\n): mainObjects {\n  const players = scopes.byKind(\"player\");\n\n  const res: mainObjects = {\n    players: Array.from(players.values()) as Player[],\n    game: null,\n    player: null,\n    round: null,\n    stage: null,\n  };\n\n  if (players.size === 0) {\n    return res;\n  }\n\n  res.player = Array.from(players.values()).find((p) => {\n    const pID = attributes.nextAttributeValue(p.id, \"participantID\") as string;\n    return pID === participantID;\n  }) as Player;\n\n  if (!res.player) {\n    return res;\n  }\n\n  res.game = nextScopeByKey(scopes, attributes, res.player, \"gameID\") as Game;\n  if (!res.game) {\n    return res;\n  }\n\n  for (const player of res.players || []) {\n    const key = `playerGameID-${res.game.id}`;\n    if (!nextScopeByKey(scopes, attributes, player, key)) {\n      return res;\n    }\n  }\n\n  res.stage = nextScopeByKey(scopes, attributes, res.game, \"stageID\") as Stage;\n  if (!res.stage) {\n    return res;\n  }\n\n  for (const player of res.players || []) {\n    const key = `playerStageID-${res.stage.id}`;\n    if (!nextScopeByKey(scopes, attributes, player, key)) {\n      delete res.stage;\n      return res;\n    }\n  }\n\n  res.round = nextScopeByKey(scopes, attributes, res.stage, \"roundID\") as Round;\n  if (!res.round) {\n    return res;\n  }\n\n  for (const player of res.players || []) {\n    const key = `playerRoundID-${res.round.id}`;\n    if (!nextScopeByKey(scopes, attributes, player, key)) {\n      delete res.stage;\n      delete res.round;\n      return res;\n    }\n  }\n\n  return res;\n}\n\nfunction nextScopeByKey(\n  scopes: Scopes<Context, EmpiricaClassicKinds>,\n  attributes: Attributes,\n  scope: Scope<Context, EmpiricaClassicKinds>,\n  key: string\n) {\n  const id = attributes.nextAttributeValue(scope.id, key);\n  if (!id || typeof id !== \"string\") {\n    return null;\n  }\n\n  return scopes.scope(id) || null;\n}\n"],"mappings":"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","names":[]}